{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Label","_ref","children","react_default","a","createElement","style","position","top","right","background","borderRadius","padding","fontSize","zIndex","CustomEditor","_this","this","lib_default","value","props","code","onValueChange","highlight","language","fontFamily","React","Component","Scroll","_ref2","left","bottom","overflow","DebouncedEmutoOutput","debounceRender","_ref3","QueryCode","JSONCode","result","emuto","JSON","parse","console","log","App_Scroll","App_CustomEditor","beautify","languages","json","e","ObjectInspector_default","data","className","toString","App","state","setState","index_esm","defaultSize","minSize","split","width","height","App_Label","clike","onSetQueryCode","bind","onSetJSONCode","margin","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fe921af.chunk.js","sourcesContent":["import React from 'react';\nimport Editor from 'react-simple-code-editor';\nimport {highlight, languages} from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/themes/prism.css';\nimport SplitPane from 'react-split-pane';\nimport ObjectInspector from 'react-object-inspector';\nimport emuto from 'emuto';\nimport debounceRender from 'react-debounce-render';\nimport beautify from 'json-beautify';\nimport JSONCode from './input.json';\n\nconst Label = ({children}) => (\n  <div\n    style={{\n      position: 'absolute',\n      top: '1em',\n      right: '1em',\n      background: 'antiquewhite',\n      borderRadius: '10%',\n      padding: '.1em .3em',\n      fontSize: '.8em',\n      zIndex: '10',\n    }}>\n    {children}\n  </div>\n);\n\nclass CustomEditor extends React.Component {\n  render() {\n    return (\n      <Editor\n        value={this.props.code}\n        onValueChange={this.props.onValueChange}\n        highlight={code => highlight(code, this.props.language)}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n        }}\n      />\n    );\n  }\n}\n\nconst Scroll = ({children}) => (\n  <div\n    style={{\n      position: 'absolute',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      overflow: 'auto',\n    }}>\n    {children}\n  </div>\n);\n\nconst EmutoOutput = ({QueryCode, JSONCode}) => {\n  try {\n    const result = emuto(QueryCode)(JSON.parse(JSONCode));\n    console.log(result);\n    try {\n      return (\n        <Scroll>\n          <CustomEditor\n            code={beautify(result, null, 2)}\n            language={languages.json}\n            onValueChange={() => {}}\n          />\n        </Scroll>\n      );\n    } catch (e) {\n      return <ObjectInspector data={result} />;\n    }\n  } catch (e) {\n    return <div className=\"errorMessage\">{e.toString()}</div>;\n  }\n};\n\nconst DebouncedEmutoOutput = debounceRender(EmutoOutput);\n\nclass App extends React.Component {\n  state = {\n    QueryCode: `$ { producer, title, ...Stats }\n\nwhere\n  $Stats = ($ => {\n      \"characters\": ($.characters | length),\n      \"starships\": ($.starships | length),\n      \"planets\": ($.planets | length)\n    })`,\n    JSONCode: beautify(JSONCode, null, 2),\n  };\n\n  onSetJSONCode(JSONCode) {\n    this.setState({JSONCode});\n  }\n\n  onSetQueryCode(QueryCode) {\n    this.setState({QueryCode});\n  }\n\n  render() {\n    return (\n      <SplitPane defaultSize=\"55%\" minSize={300} split=\"vertical\">\n        <SplitPane defaultSize=\"20%\" minSize={150} split=\"horizontal\">\n          <div\n            style={{\n              width: '100%',\n              height: '100%',\n            }}>\n            <Scroll>\n              <Label>Query</Label>\n              <CustomEditor\n                code={this.state.QueryCode}\n                language={languages.clike}\n                onValueChange={this.onSetQueryCode.bind(this)}\n              />\n            </Scroll>\n          </div>\n          <div\n            style={{\n              width: '100%',\n              height: '100%',\n            }}>\n            <Scroll>\n              <Label>Input</Label>\n              <CustomEditor\n                code={this.state.JSONCode}\n                language={languages.json}\n                onValueChange={this.onSetJSONCode.bind(this)}\n              />\n            </Scroll>\n          </div>\n        </SplitPane>\n        <div\n          style={{\n            width: '100%',\n            height: '100%',\n            margin: '1em',\n          }}>\n          <Label>Output</Label>\n          <DebouncedEmutoOutput\n            JSONCode={this.state.JSONCode}\n            QueryCode={this.state.QueryCode}\n          />\n        </div>\n      </SplitPane>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}